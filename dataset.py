import os
import torch
from sklearn.model_selection import train_test_split
from torch.utils.data import DataLoader, Dataset, Subset


class MalwareDataset(Dataset):
    def __init__(self, max_len, ben_dir='data/benign', mal_dir='data/malicious'):
        self.ben_dir = ben_dir
        self.mal_dir = mal_dir
        self.ben_files = sorted(os.listdir(ben_dir))
        self.mal_files = sorted(os.listdir(mal_dir))
        self.max_len = max_len

    def __getitem__(self, index):
        if index < len(self.ben_files):
            file_path = os.path.join(self.ben_dir, self.ben_files[index])
            label = 0
        else:
            file_path = os.path.join(self.mal_dir, self.mal_files[index - len(self.ben_files)])
            label = 1
        with open(file_path, "rb") as f:
            seq = [byte + 1 for byte in f.read(self.max_len)]
            if len(seq) < self.max_len:
                seq = seq + [0] * (self.max_len - len(seq))
        return torch.tensor(seq), torch.tensor(label)

    def __len__(self):
        return len(self.ben_files) + len(self.mal_files)


def create_loaders(dataset, batch_size, train_size=0.8):
    train_indices, valid_indices = create_indices(dataset, train_size)
    train_dataset = Subset(dataset, indices=train_indices)
    valid_dataset = Subset(dataset, indices=valid_indices)
    train_loader = DataLoader(train_dataset,
                              batch_size=batch_size,
                              shuffle=True)
    valid_loader = DataLoader(valid_dataset,
                              batch_size=batch_size,
                              shuffle=True)
    return train_loader, valid_loader


def create_indices(dataset, train_size):
    len_ben = len(dataset.ben_files)
    len_mal = len(dataset.mal_files)
    ben_indices = range(len_ben)
    mal_indices = range(len_ben, len_ben + len_mal)
    train_ben_indices, valid_ben_indices = train_test_split(ben_indices,
                                                            train_size=train_size,
                                                            shuffle=True)

    train_mal_indices, valid_mal_indices = train_test_split(mal_indices,
                                                            train_size=train_size,
                                                            shuffle=True)
    train_indices = train_ben_indices + train_mal_indices
    valid_indices = valid_ben_indices + valid_mal_indices
    return train_indices, valid_indices
