import argparse
import os
import time
import lightgbm
import torch
import numpy as np
from features import PEFeatureExtractor
from model import MalConv


parser = argparse.ArgumentParser(description='Predict whether a PE file is a malware.')
parser.add_argument('--file_path', type=str, default=None)


def predict_gbm(file_path):
    extractor = PEFeatureExtractor(feature_version=2)
    with open(file_path, 'rb') as f:
        file_data = f.read()
    features = np.array(extractor.feature_vector(file_data), dtype=np.float32)

    model_path = os.path.join('results', 'models', 'ember_model_2018.txt')
    model = lightgbm.Booster(model_file=model_path)

    score = model.predict([features])[0]
    return score


def predict_conv(file_path):
    max_seq_len = 1024 * 1024
    with open(file_path, 'rb') as f:
        seq = [x + 1 for x in f.read(max_seq_len)]
        seq_len = len(seq)
        if seq_len < max_seq_len:
            seq += (max_seq_len - seq_len) * [0]
    seq = torch.tensor(seq).unsqueeze(0)

    model_path = os.path.join('results', 'models', 'model_max_accu.pth')
    state_dict = torch.load(model_path, map_location='cpu')['model']
    model = MalConv(window_size=512)
    model.load_state_dict(state_dict)

    model.eval()
    with torch.no_grad():
        score = model(seq)
    score = score.softmax(dim=1)[0][1]
    return score.item()


def main():
    args = parser.parse_args()
    file_path = args.file_path
    if file_path is None:
        print('Please specify path to a PE file.')
        return

    print('Making prediction using LightGBM model.')
    start_time = time.time()
    score = predict_gbm(file_path)
    duration = time.time() - start_time
    print(f'score ([0, 1] with 1 indicating a malware): {score:.4f}')
    print(f'time: {duration:.4f} seconds')

    print('Making prediction using MalConv model.')
    start_time = time.time()
    score = predict_conv(file_path)
    duration = time.time() - start_time
    print(f'score ([0, 1] with 1 indicating a malware): {score:.4f}')
    print(f'time: {duration:.4f} seconds')


if __name__ == '__main__':
    main()
