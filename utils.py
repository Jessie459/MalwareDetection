import os
import random
import matplotlib.pyplot as plt
import numpy as np
import torch


def set_seed(seed):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = True


def plot_loss(train_loss, valid_loss, label='epoch'):
    fig, ax = plt.subplots()
    ax.set_xlabel(label)
    ax.set_ylabel('loss')
    ax.plot(range(1, len(train_loss) + 1), train_loss, color='b', label='train loss')
    ax.plot(range(1, len(valid_loss) + 1), valid_loss, color='r', label='valid loss')
    ax.legend(loc='best')
    fig.savefig(os.path.join('results', 'images', label + '_accu.jpg'))
    plt.close(fig)


def plot_accu(train_accu, valid_accu, label='epoch'):
    fig, ax = plt.subplots()
    ax.set_xlabel(label)
    ax.set_ylabel('accuracy')
    ax.plot(range(1, len(train_accu) + 1), train_accu, color='b', label='train accuracy')
    ax.plot(range(1, len(valid_accu) + 1), valid_accu, color='r', label='valid accuracy')
    ax.legend(loc='best')
    fig.savefig(os.path.join('results', 'images', label + '_accu.jpg'))
    plt.close(fig)


def plot_curve(curve1, curve2, label1, label2, x_label, y_label, title, save_name):
    fig, ax = plt.subplots()
    ax.set_title(title)
    ax.set_xlabel(x_label)
    ax.set_ylabel(y_label)
    ax.plot(range(1, len(curve1) + 1), curve1, color='b', label=label1)
    ax.plot(range(1, len(curve2) + 1), curve2, color='r', label=label2)
    ax.legend(loc='best')
    fig.savefig(os.path.join('results', 'images', save_name + '.jpg'))
    plt.close(fig)
